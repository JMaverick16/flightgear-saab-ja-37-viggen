<?xml version="1.0" encoding="utf-8"?>

<PropertyList>
  <name>loadout</name>
  <width>500</width>
  <layout>vbox</layout>

  <nasal>
    <open>
      var fuel_request = props.globals.getNode("/consumables/fuel/requested-percent", 1);

      # Fuel request slider follows actual fuel level
      var update_fuel_slider = func() {
          fuel_request.setValue(getprop("/instrumentation/fuel/ratio") * 100);
      }
      update_fuel_slider();

      var fuel_slider_timer = maketimer(1, update_fuel_slider);
      fuel_slider_timer.simulatedTime = 1;
      fuel_slider_timer.start();

      # To avoid continuously calling loadout.refuel() (which is a bit costly)
      # when touching the refuel slider, the request is only sent after
      # the slider is left in position for a small delay.
      var fuel_request_delay = 0.2;

      var fuel_request_timer = maketimer(fuel_request_delay, func() {
          var level = fuel_request.getValue() / 100;
          level = loadout.refuel(level);
          fuel_request.setValue(level * 100);
          fuel_slider_timer.start();
      });
      fuel_request_timer.singleShot = 1;

      var on_fuel_request = func() {
          fuel_slider_timer.stop(); # Temporarily disable slider updates
          fuel_request_timer.restart(fuel_request_delay);
      }
    </open>
    <close>
      fuel_slider_timer.stop();
    </close>
  </nasal>
  <!-- Title bar -->
  <group>
    <layout>hbox</layout>
    <empty><stretch>1</stretch></empty>

    <text>
      <label>Loadout Selection</label>
    </text>

    <empty><stretch>1</stretch></empty>

    <button>
      <pref-width>16</pref-width>
      <pref-height>16</pref-height>
      <legend></legend>
      <default>1</default>
      <keynum>27</keynum>
      <border>2</border>
      <binding>
        <command>nasal</command>
        <script>loadout.Dialog.close()</script>
      </binding>
      <binding>
        <command>dialog-apply</command>
      </binding>
    </button>
  </group>

  <hrule/>

  <!-- Fuel -->
  <group>
    <layout>hbox</layout>

    <text><label>Fuel:</label></text>

    <slider>
      <min>0</min>
      <max>123</max>
      <property>/consumables/fuel/requested-percent</property>
      <live>true</live>
      <binding>
        <command>dialog-apply</command>
      </binding>
      <binding>
        <command>nasal</command>
        <script>on_fuel_request();</script>
      </binding>
    </slider>

    <text>
      <label>100%</label>
      <format>%3.f%%</format>
      <property>/consumables/fuel/requested-percent</property>
      <live>true</live>
    </text>

    <empty><stretch>true</stretch></empty>
  </group>

  <text>
    <halign>left</halign>
    <label>Fuel % corresponds to the fuel gauge. 100% is full internal tanks.</label>
  </text>

  <hrule/>

  <!-- General loadout options -->
  <text>
    <label>Payload</label>
  </text>

  <group>
    <layout>hbox</layout>

    <button>
      <legend>Clean loadout</legend>
      <pref-width>120</pref-width>
      <binding>
        <command>nasal</command>
        <script>loadout.reload_clean();</script>
      </binding>
    </button>

    <button>
      <legend>Reload gun/flares</legend>
      <pref-width>120</pref-width>
      <binding>
        <command>nasal</command>
        <script>loadout.reload_gun_flares();</script>
      </binding>
    </button>
  </group>

  <!-- This table is filled based on a list of loadouts, in Nasal/payload/loadout.nas -->
  <group>
    <name>procedural_table</name>
    <layout>table</layout>
  </group>
</PropertyList>
